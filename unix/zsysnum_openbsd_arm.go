// go run mksysnum.go https://cvsweb.openbsd.org/cgi-bin/cvsweb/~checkout~/src/sys/kern/syscalls.master
// Code generated by the command above; see README.md. DO NOT EDIT.

// +build arm,openbsd

package unix

const (
	// { void sys_exit(int rval); }
	// { int sys_fork(void); }
	// { ssize_t sys_read(int fd, void *buf, size_t nbyte); }
	// { ssize_t sys_write(int fd, const void *buf, size_t nbyte); }
	// { int sys_open(const char *path, int flags, ... mode_t mode); }
	// { int sys_close(int fd); }
	// { int sys_getentropy(void *buf, size_t nbyte); }
	// { int sys___tfork(const struct __tfork *param, size_t psize); }
	// { int sys_link(const char *path, const char *link); }
	// { int sys_unlink(const char *path); }
	// { pid_t sys_wait4(pid_t pid, int *status, int options, struct rusage *rusage); }
	// { int sys_chdir(const char *path); }
	// { int sys_fchdir(int fd); }
	// { int sys_mknod(const char *path, mode_t mode, dev_t dev); }
	// { int sys_chmod(const char *path, mode_t mode); }
	// { int sys_chown(const char *path, uid_t uid, gid_t gid); }
	// { int sys_obreak(char *nsize); } break
	// { int sys_getdtablecount(void); }
	// { int sys_getrusage(int who, struct rusage *rusage); }
	// { pid_t sys_getpid(void); }
	// { int sys_mount(const char *type, const char *path, int flags, void *data); }
	// { int sys_unmount(const char *path, int flags); }
	// { int sys_setuid(uid_t uid); }
	// { uid_t sys_getuid(void); }
	// { uid_t sys_geteuid(void); }
	// { int sys_ptrace(int req, pid_t pid, caddr_t addr, int data); }
	// { ssize_t sys_recvmsg(int s, struct msghdr *msg, int flags); }
	// { ssize_t sys_sendmsg(int s, const struct msghdr *msg, int flags); }
	// { ssize_t sys_recvfrom(int s, void *buf, size_t len, int flags, struct sockaddr *from, socklen_t *fromlenaddr); }
	// { int sys_accept(int s, struct sockaddr *name, socklen_t *anamelen); }
	// { int sys_getpeername(int fdes, struct sockaddr *asa, socklen_t *alen); }
	// { int sys_getsockname(int fdes, struct sockaddr *asa, socklen_t *alen); }
	// { int sys_access(const char *path, int amode); }
	// { int sys_chflags(const char *path, u_int flags); }
	// { int sys_fchflags(int fd, u_int flags); }
	// { void sys_sync(void); }
	// { int sys_stat(const char *path, struct stat *ub); }
	// { pid_t sys_getppid(void); }
	// { int sys_lstat(const char *path, struct stat *ub); }
	// { int sys_dup(int fd); }
	// { int sys_fstatat(int fd, const char *path, struct stat *buf, int flag); }
	// { gid_t sys_getegid(void); }
	// { int sys_profil(caddr_t samples, size_t size, u_long offset, u_int scale); }
	// { int sys_ktrace(const char *fname, int ops, int facs, pid_t pid); }
	// { int sys_sigaction(int signum, const struct sigaction *nsa, struct sigaction *osa); }
	// { gid_t sys_getgid(void); }
	// { int sys_sigprocmask(int how, sigset_t mask); }
	// { int sys_setlogin(const char *namebuf); }
	// { int sys_acct(const char *path); }
	// { int sys_sigpending(void); }
	// { int sys_fstat(int fd, struct stat *sb); }
	// { int sys_ioctl(int fd, u_long com, ... void *data); }
	// { int sys_reboot(int opt); }
	// { int sys_revoke(const char *path); }
	// { int sys_symlink(const char *path, const char *link); }
	// { ssize_t sys_readlink(const char *path, char *buf, size_t count); }
	// { int sys_execve(const char *path, char * const *argp, char * const *envp); }
	// { mode_t sys_umask(mode_t newmask); }
	// { int sys_chroot(const char *path); }
	// { int sys_getfsstat(struct statfs *buf, size_t bufsize, int flags); }
	// { int sys_statfs(const char *path, struct statfs *buf); }
	// { int sys_fstatfs(int fd, struct statfs *buf); }
	// { int sys_fhstatfs(const fhandle_t *fhp, struct statfs *buf); }
	// { int sys_vfork(void); }
	// { int sys_gettimeofday(struct timeval *tp, struct timezone *tzp); }
	// { int sys_settimeofday(const struct timeval *tv, const struct timezone *tzp); }
	// { int sys_setitimer(int which, const struct itimerval *itv, struct itimerval *oitv); }
	// { int sys_getitimer(int which, struct itimerval *itv); }
	// { int sys_select(int nd, fd_set *in, fd_set *ou, fd_set *ex, struct timeval *tv); }
	// { int sys_kevent(int fd, const struct kevent *changelist, int nchanges, struct kevent *eventlist, int nevents, const struct timespec *timeout); }
	// { int sys_munmap(void *addr, size_t len); }
	// { int sys_mprotect(void *addr, size_t len, int prot); }
	// { int sys_madvise(void *addr, size_t len, int behav); }
	// { int sys_utimes(const char *path, const struct timeval *tptr); }
	// { int sys_futimes(int fd, const struct timeval *tptr); }
	SYS_MINCORE = 78 // { int sys_mincore(void *addr, size_t len, char *vec); }
	// { int sys_getgroups(int gidsetsize, gid_t *gidset); }
	// { int sys_setgroups(int gidsetsize, const gid_t *gidset); }
	// { int sys_getpgrp(void); }
	// { int sys_setpgid(pid_t pid, pid_t pgid); }
	// { int sys_futex(uint32_t *f, int op, int val, const struct timespec *timeout, uint32_t *g); }
	// { int sys_utimensat(int fd, const char *path, const struct timespec *times, int flag); }
	// { int sys_futimens(int fd, const struct timespec *times); }
	// { int sys_kbind(const struct __kbind *param, size_t psize, int64_t proc_cookie); }
	// { int sys_clock_gettime(clockid_t clock_id, struct timespec *tp); }
	// { int sys_clock_settime(clockid_t clock_id, const struct timespec *tp); }
	// { int sys_clock_getres(clockid_t clock_id, struct timespec *tp); }
	// { int sys_dup2(int from, int to); }
	// { int sys_nanosleep(const struct timespec *rqtp, struct timespec *rmtp); }
	// { int sys_fcntl(int fd, int cmd, ... void *arg); }
	// { int sys_accept4(int s, struct sockaddr *name, socklen_t *anamelen, int flags); }
	// { int sys___thrsleep(const volatile void *ident, clockid_t clock_id, const struct timespec *tp, void *lock, const int *abort); }
	// { int sys_fsync(int fd); }
	// { int sys_setpriority(int which, id_t who, int prio); }
	// { int sys_socket(int domain, int type, int protocol); }
	// { int sys_connect(int s, const struct sockaddr *name, socklen_t namelen); }
	// { int sys_getdents(int fd, void *buf, size_t buflen); }
	// { int sys_getpriority(int which, id_t who); }
	// { int sys_pipe2(int *fdp, int flags); }
	// { int sys_dup3(int from, int to, int flags); }
	// { int sys_sigreturn(struct sigcontext *sigcntxp); }
	// { int sys_bind(int s, const struct sockaddr *name, socklen_t namelen); }
	// { int sys_setsockopt(int s, int level, int name, const void *val, socklen_t valsize); }
	// { int sys_listen(int s, int backlog); }
	// { int sys_chflagsat(int fd, const char *path, u_int flags, int atflags); }
	// { int sys_pledge(const char *promises, const char *execpromises); }
	// { int sys_ppoll(struct pollfd *fds, u_int nfds, const struct timespec *ts, const sigset_t *mask); }
	// { int sys_pselect(int nd, fd_set *in, fd_set *ou, fd_set *ex, const struct timespec *ts, const sigset_t *mask); }
	// { int sys_sigsuspend(int mask); }
	// { int sys_sendsyslog(const char *buf, size_t nbyte, int flags); }
	// { int sys_unveil(const char *path, const char *permissions); }
	// { int sys_getsockopt(int s, int level, int name, void *val, socklen_t *avalsize); }
	// { int sys_thrkill(pid_t tid, int signum, void *tcb); }
	// { ssize_t sys_readv(int fd, const struct iovec *iovp, int iovcnt); }
	// { ssize_t sys_writev(int fd, const struct iovec *iovp, int iovcnt); }
	// { int sys_kill(int pid, int signum); }
	// { int sys_fchown(int fd, uid_t uid, gid_t gid); }
	// { int sys_fchmod(int fd, mode_t mode); }
	// { int sys_setreuid(uid_t ruid, uid_t euid); }
	// { int sys_setregid(gid_t rgid, gid_t egid); }
	// { int sys_rename(const char *from, const char *to); }
	// { int sys_flock(int fd, int how); }
	// { int sys_mkfifo(const char *path, mode_t mode); }
	// { ssize_t sys_sendto(int s, const void *buf, size_t len, int flags, const struct sockaddr *to, socklen_t tolen); }
	// { int sys_shutdown(int s, int how); }
	// { int sys_socketpair(int domain, int type, int protocol, int *rsv); }
	// { int sys_mkdir(const char *path, mode_t mode); }
	// { int sys_rmdir(const char *path); }
	// { int sys_adjtime(const struct timeval *delta, struct timeval *olddelta); }
	// { int sys_getlogin_r(char *namebuf, u_int namelen); }
	// { int sys_setsid(void); }
	// { int sys_quotactl(const char *path, int cmd, int uid, char *arg); }
	// { int sys_nfssvc(int flag, void *argp); }
	// { int sys_getfh(const char *fname, fhandle_t *fhp); }
	// { int sys_sysarch(int op, void *parms); }
	// { ssize_t sys_pread(int fd, void *buf, size_t nbyte, int pad, off_t offset); }
	// { ssize_t sys_pwrite(int fd, const void *buf, size_t nbyte, int pad, off_t offset); }
	// { int sys_setgid(gid_t gid); }
	// { int sys_setegid(gid_t egid); }
	// { int sys_seteuid(uid_t euid); }
	// { long sys_pathconf(const char *path, int name); }
	// { long sys_fpathconf(int fd, int name); }
	// { int sys_swapctl(int cmd, const void *arg, int misc); }
	// { int sys_getrlimit(int which, struct rlimit *rlp); }
	// { int sys_setrlimit(int which, const struct rlimit *rlp); }
	// { void *sys_mmap(void *addr, size_t len, int prot, int flags, int fd, long pad, off_t pos); }
	// { off_t sys_lseek(int fd, int pad, off_t offset, int whence); }
	// { int sys_truncate(const char *path, int pad, off_t length); }
	// { int sys_ftruncate(int fd, int pad, off_t length); }
	// { int sys_sysctl(const int *name, u_int namelen, void *old, size_t *oldlenp, void *new, size_t newlen); }
	// { int sys_mlock(const void *addr, size_t len); }
	// { int sys_munlock(const void *addr, size_t len); }
	// { pid_t sys_getpgid(pid_t pid); }
	// { int sys_utrace(const char *label, const void *addr, size_t len); }
	// { int sys_semget(key_t key, int nsems, int semflg); }
	// { int sys_msgget(key_t key, int msgflg); }
	// { int sys_msgsnd(int msqid, const void *msgp, size_t msgsz, int msgflg); }
	// { int sys_msgrcv(int msqid, void *msgp, size_t msgsz, long msgtyp, int msgflg); }
	// { void *sys_shmat(int shmid, const void *shmaddr, int shmflg); }
	// { int sys_shmdt(const void *shmaddr); }
	// { int sys_minherit(void *addr, size_t len, int inherit); }
	// { int sys_poll(struct pollfd *fds, u_int nfds, int timeout); }
	// { int sys_issetugid(void); }
	// { int sys_lchown(const char *path, uid_t uid, gid_t gid); }
	// { pid_t sys_getsid(pid_t pid); }
	// { int sys_msync(void *addr, size_t len, int flags); }
	// { int sys_pipe(int *fdp); }
	// { int sys_fhopen(const fhandle_t *fhp, int flags); }
	// { ssize_t sys_preadv(int fd, const struct iovec *iovp, int iovcnt, int pad, off_t offset); }
	// { ssize_t sys_pwritev(int fd, const struct iovec *iovp, int iovcnt, int pad, off_t offset); }
	// { int sys_kqueue(void); }
	// { int sys_mlockall(int flags); }
	// { int sys_munlockall(void); }
	// { int sys_getresuid(uid_t *ruid, uid_t *euid, uid_t *suid); }
	// { int sys_setresuid(uid_t ruid, uid_t euid, uid_t suid); }
	// { int sys_getresgid(gid_t *rgid, gid_t *egid, gid_t *sgid); }
	// { int sys_setresgid(gid_t rgid, gid_t egid, gid_t sgid); }
	// { void *sys_mquery(void *addr, size_t len, int prot, int flags, int fd, long pad, off_t pos); }
	// { int sys_closefrom(int fd); }
	// { int sys_sigaltstack(const struct sigaltstack *nss, struct sigaltstack *oss); }
	// { int sys_shmget(key_t key, size_t size, int shmflg); }
	// { int sys_semop(int semid, struct sembuf *sops, size_t nsops); }
	// { int sys_fhstat(const fhandle_t *fhp, struct stat *sb); }
	// { int sys___semctl(int semid, int semnum, int cmd, union semun *arg); }
	// { int sys_shmctl(int shmid, int cmd, struct shmid_ds *buf); }
	// { int sys_msgctl(int msqid, int cmd, struct msqid_ds *buf); }
	// { int sys_sched_yield(void); }
	// { pid_t sys_getthrid(void); }
	// { int sys___thrwakeup(const volatile void *ident, int n); }
	// { void sys___threxit(pid_t *notdead); }
	// { int sys___thrsigdivert(sigset_t sigmask, siginfo_t *info, const struct timespec *timeout); }
	// { int sys___getcwd(char *buf, size_t len); }
	// { int sys_adjfreq(const int64_t *freq, int64_t *oldfreq); }
	// { int sys_setrtable(int rtableid); }
	// { int sys_getrtable(void); }
	// { int sys_faccessat(int fd, const char *path, int amode, int flag); }
	// { int sys_fchmodat(int fd, const char *path, mode_t mode, int flag); }
	// { int sys_fchownat(int fd, const char *path, uid_t uid, gid_t gid, int flag); }
	// { int sys_linkat(int fd1, const char *path1, int fd2, const char *path2, int flag); }
	// { int sys_mkdirat(int fd, const char *path, mode_t mode); }
	// { int sys_mkfifoat(int fd, const char *path, mode_t mode); }
	// { int sys_mknodat(int fd, const char *path, mode_t mode, dev_t dev); }
	// { int sys_openat(int fd, const char *path, int flags, ... mode_t mode); }
	// { ssize_t sys_readlinkat(int fd, const char *path, char *buf, size_t count); }
	// { int sys_renameat(int fromfd, const char *from, int tofd, const char *to); }
	// { int sys_symlinkat(const char *path, int fd, const char *link); }
	// { int sys_unlinkat(int fd, const char *path, int flag); }
	// { void sys___set_tcb(void *tcb); }
	// { void *sys___get_tcb(void); }
)
