// go run mksysnum.go https://gitweb.dragonflybsd.org/dragonfly.git/blob_plain/HEAD:/sys/kern/syscalls.master
// Code generated by the command above; see README.md. DO NOT EDIT.

// +build amd64,dragonfly

package unix

// SYS_NOSYS = 0;  // { int nosys(void); } syscall nosys_args int
// { void exit(int rval); }
// { int fork(void); }
// { ssize_t read(int fd, void *buf, size_t nbyte); }
// { ssize_t write(int fd, const void *buf, size_t nbyte); }
// { int open(char *path, int flags, int mode); }
// { int close(int fd); }
// { int wait4(int pid, int *status, int options, struct rusage *rusage); } wait4 wait_args int
// { int link(char *path, char *link); }
// { int unlink(char *path); }
// { int chdir(char *path); }
// { int fchdir(int fd); }
// { int mknod(char *path, int mode, int dev); }
// { int chmod(char *path, int mode); }
// { int chown(char *path, int uid, int gid); }
// { int obreak(char *nsize); } break obreak_args int
// { int getfsstat(struct statfs *buf, long bufsize, int flags); }
// { pid_t getpid(void); }
// { int mount(char *type, char *path, int flags, caddr_t data); }
// { int unmount(char *path, int flags); }
// { int setuid(uid_t uid); }
// { uid_t getuid(void); }
// { uid_t geteuid(void); }
// { int ptrace(int req, pid_t pid, caddr_t addr, int data); }
// { int recvmsg(int s, struct msghdr *msg, int flags); }
// { int sendmsg(int s, caddr_t msg, int flags); }
// { int recvfrom(int s, caddr_t buf, size_t len, int flags, caddr_t from, int *fromlenaddr); }
// { int accept(int s, caddr_t name, int *anamelen); }
// { int getpeername(int fdes, caddr_t asa, int *alen); }
// { int getsockname(int fdes, caddr_t asa, int *alen); }
// { int access(char *path, int flags); }
// { int chflags(char *path, int flags); }
// { int fchflags(int fd, int flags); }
// { int sync(void); }
// { int kill(int pid, int signum); }
// { pid_t getppid(void); }
// { int dup(int fd); }
// { int pipe(void); }
// { gid_t getegid(void); }
// { int profil(caddr_t samples, size_t size, size_t offset, u_int scale); }
// { int ktrace(const char *fname, int ops, int facs, int pid); }
// { gid_t getgid(void); }
// { int getlogin(char *namebuf, u_int namelen); }
// { int setlogin(char *namebuf); }
// { int acct(char *path); }
// { int sigaltstack(stack_t *ss, stack_t *oss); }
// { int ioctl(int fd, u_long com, caddr_t data); }
// { int reboot(int opt); }
// { int revoke(char *path); }
// { int symlink(char *path, char *link); }
// { int readlink(char *path, char *buf, int count); }
// { int execve(char *fname, char **argv, char **envv); }
// { int umask(int newmask); } umask umask_args int
// { int chroot(char *path); }
// { int msync(void *addr, size_t len, int flags); }
// { pid_t vfork(void); }
// { int sbrk(int incr); }
// { int sstk(int incr); }
// { int munmap(void *addr, size_t len); }
// { int mprotect(void *addr, size_t len, int prot); }
// { int madvise(void *addr, size_t len, int behav); }
// { int mincore(const void *addr, size_t len, char *vec); }
// { int getgroups(u_int gidsetsize, gid_t *gidset); }
// { int setgroups(u_int gidsetsize, gid_t *gidset); }
// { int getpgrp(void); }
// { int setpgid(int pid, int pgid); }
// { int setitimer(u_int which, struct itimerval *itv, struct itimerval *oitv); }
// { int swapon(char *name); }
// { int getitimer(u_int which, struct itimerval *itv); }
// { int getdtablesize(void); }
// { int dup2(int from, int to); }
// { int fcntl(int fd, int cmd, long arg); }
// { int select(int nd, fd_set *in, fd_set *ou, fd_set *ex, struct timeval *tv); }
// { int fsync(int fd); }
// { int setpriority(int which, int who, int prio); }
// { int socket(int domain, int type, int protocol); }
// { int connect(int s, caddr_t name, int namelen); }
// { int getpriority(int which, int who); }
// { int bind(int s, caddr_t name, int namelen); }
// { int setsockopt(int s, int level, int name, caddr_t val, int valsize); }
// { int listen(int s, int backlog); }
// { int gettimeofday(struct timeval *tp, struct timezone *tzp); }
// { int getrusage(int who, struct rusage *rusage); }
// { int getsockopt(int s, int level, int name, caddr_t val, int *avalsize); }
// { int readv(int fd, struct iovec *iovp, u_int iovcnt); }
// { int writev(int fd, struct iovec *iovp, u_int iovcnt); }
// { int settimeofday(struct timeval *tv, struct timezone *tzp); }
// { int fchown(int fd, int uid, int gid); }
// { int fchmod(int fd, int mode); }
// { int setreuid(int ruid, int euid); }
// { int setregid(int rgid, int egid); }
// { int rename(char *from, char *to); }
// { int flock(int fd, int how); }
// { int mkfifo(char *path, int mode); }
// { int sendto(int s, caddr_t buf, size_t len, int flags, caddr_t to, int tolen); }
// { int shutdown(int s, int how); }
// { int socketpair(int domain, int type, int protocol, int *rsv); }
// { int mkdir(char *path, int mode); }
// { int rmdir(char *path); }
// { int utimes(char *path, struct timeval *tptr); }
// { int adjtime(struct timeval *delta, struct timeval *olddelta); }
// { int setsid(void); }
// { int quotactl(char *path, int cmd, int uid, caddr_t arg); }
// { int statfs(char *path, struct statfs *buf); }
// { int fstatfs(int fd, struct statfs *buf); }
// { int getfh(char *fname, struct fhandle *fhp); }
// { int getdomainname(char *domainname, int len); }
// { int setdomainname(char *domainname, int len); }
// { int uname(struct utsname *name); }
// { int sysarch(int op, char *parms); }
// { int rtprio(int function, pid_t pid, struct rtprio *rtp); }
// { ssize_t extpread(int fd, void *buf, size_t nbyte, int flags, off_t offset); }
// { ssize_t extpwrite(int fd, const void *buf, size_t nbyte, int flags, off_t offset); }
// { int ntp_adjtime(struct timex *tp); }
// { int setgid(gid_t gid); }
// { int setegid(gid_t egid); }
// { int seteuid(uid_t euid); }
// { int pathconf(char *path, int name); }
// { int fpathconf(int fd, int name); }
// { int getrlimit(u_int which, struct rlimit *rlp); } getrlimit __getrlimit_args int
// { int setrlimit(u_int which, struct rlimit *rlp); } setrlimit __setrlimit_args int
// { caddr_t mmap(caddr_t addr, size_t len, int prot, int flags, int fd, int pad, off_t pos); }
// SYS_NOSYS = 198;  // { int nosys(void); } __syscall __syscall_args int
// { off_t lseek(int fd, int pad, off_t offset, int whence); }
// { int truncate(char *path, int pad, off_t length); }
// { int ftruncate(int fd, int pad, off_t length); }
// { int __sysctl(int *name, u_int namelen, void *old, size_t *oldlenp, void *new, size_t newlen); } __sysctl sysctl_args int
// { int mlock(const void *addr, size_t len); }
// { int munlock(const void *addr, size_t len); }
// { int undelete(char *path); }
// { int futimes(int fd, struct timeval *tptr); }
// { int getpgid(pid_t pid); }
// { int poll(struct pollfd *fds, u_int nfds, int timeout); }
// { int __semctl(int semid, int semnum, int cmd, union semun *arg); }
// { int semget(key_t key, int nsems, int semflg); }
// { int semop(int semid, struct sembuf *sops, u_int nsops); }
// { int msgctl(int msqid, int cmd, struct msqid_ds *buf); }
// { int msgget(key_t key, int msgflg); }
// { int msgsnd(int msqid, const void *msgp, size_t msgsz, int msgflg); }
// { int msgrcv(int msqid, void *msgp, size_t msgsz, long msgtyp, int msgflg); }
// { caddr_t shmat(int shmid, const void *shmaddr, int shmflg); }
// { int shmctl(int shmid, int cmd, struct shmid_ds *buf); }
// { int shmdt(const void *shmaddr); }
// { int shmget(key_t key, size_t size, int shmflg); }
// { int clock_gettime(clockid_t clock_id, struct timespec *tp); }
// { int clock_settime(clockid_t clock_id, const struct timespec *tp); }
// { int clock_getres(clockid_t clock_id, struct timespec *tp); }
// { int nanosleep(const struct timespec *rqtp, struct timespec *rmtp); }
// { int minherit(void *addr, size_t len, int inherit); }
// { int rfork(int flags); }
// { int openbsd_poll(struct pollfd *fds, u_int nfds, int timeout); }
// { int issetugid(void); }
// { int lchown(char *path, int uid, int gid); }
// { int lchmod(char *path, mode_t mode); }
// { int lutimes(char *path, struct timeval *tptr); }
// { ssize_t extpreadv(int fd, struct iovec *iovp, u_int iovcnt, int flags, off_t offset); }
// { ssize_t extpwritev(int fd, struct iovec *iovp,u_int iovcnt, int flags, off_t offset); }
// { int fhstatfs(const struct fhandle *u_fhp, struct statfs *buf); }
// { int fhopen(const struct fhandle *u_fhp, int flags); }
// { int modnext(int modid); }
// { int modstat(int modid, struct module_stat* stat); }
// { int modfnext(int modid); }
// { int modfind(const char *name); }
// { int kldload(const char *file); }
// { int kldunload(int fileid); }
// { int kldfind(const char *file); }
// { int kldnext(int fileid); }
// { int kldstat(int fileid, struct kld_file_stat* stat); }
// { int kldfirstmod(int fileid); }
// { int getsid(pid_t pid); }
// { int setresuid(uid_t ruid, uid_t euid, uid_t suid); }
// { int setresgid(gid_t rgid, gid_t egid, gid_t sgid); }
// { int aio_return(struct aiocb *aiocbp); }
// { int aio_suspend(struct aiocb * const * aiocbp, int nent, const struct timespec *timeout); }
// { int aio_cancel(int fd, struct aiocb *aiocbp); }
// { int aio_error(struct aiocb *aiocbp); }
// { int aio_read(struct aiocb *aiocbp); }
// { int aio_write(struct aiocb *aiocbp); }
// { int lio_listio(int mode, struct aiocb * const *acb_list, int nent, struct sigevent *sig); }
// { int yield(void); }
// { int mlockall(int how); }
// { int munlockall(void); }
// { int __getcwd(u_char *buf, u_int buflen); }
// { int sched_setparam (pid_t pid, const struct sched_param *param); }
// { int sched_getparam (pid_t pid, struct sched_param *param); }
// { int sched_setscheduler (pid_t pid, int policy, const struct sched_param *param); }
// { int sched_getscheduler (pid_t pid); }
// { int sched_yield (void); }
// { int sched_get_priority_max (int policy); }
// { int sched_get_priority_min (int policy); }
// { int sched_rr_get_interval (pid_t pid, struct timespec *interval); }
// { int utrace(const void *addr, size_t len); }
// { int kldsym(int fileid, int cmd, void *data); }
// { int jail(struct jail *jail); }
// { int sigprocmask(int how, const sigset_t *set, sigset_t *oset); }
// { int sigsuspend(const sigset_t *sigmask); }
// { int sigaction(int sig, const struct sigaction *act, struct sigaction *oact); }
// { int sigpending(sigset_t *set); }
// { int sigreturn(ucontext_t *sigcntxp); }
// { int sigtimedwait(const sigset_t *set,siginfo_t *info, const struct timespec *timeout); }
// { int sigwaitinfo(const sigset_t *set,siginfo_t *info); }
// { int __acl_get_file(const char *path, acl_type_t type, struct acl *aclp); }
// { int __acl_set_file(const char *path, acl_type_t type, struct acl *aclp); }
// { int __acl_get_fd(int filedes, acl_type_t type, struct acl *aclp); }
// { int __acl_set_fd(int filedes, acl_type_t type, struct acl *aclp); }
// { int __acl_delete_file(const char *path, acl_type_t type); }
// { int __acl_delete_fd(int filedes, acl_type_t type); }
// { int __acl_aclcheck_file(const char *path, acl_type_t type, struct acl *aclp); }
// { int __acl_aclcheck_fd(int filedes, acl_type_t type, struct acl *aclp); }
// { int extattrctl(const char *path, int cmd, const char *filename, int attrnamespace, const char *attrname); }
// { int extattr_set_file(const char *path, int attrnamespace, const char *attrname, void *data, size_t nbytes); }
// { int extattr_get_file(const char *path, int attrnamespace, const char *attrname, void *data, size_t nbytes); }
// { int extattr_delete_file(const char *path, int attrnamespace, const char *attrname); }
// { int aio_waitcomplete(struct aiocb **aiocbp, struct timespec *timeout); }
// { int getresuid(uid_t *ruid, uid_t *euid, uid_t *suid); }
// { int getresgid(gid_t *rgid, gid_t *egid, gid_t *sgid); }
// { int kqueue(void); }
// { int kevent(int fd, const struct kevent *changelist, int nchanges, struct kevent *eventlist, int nevents, const struct timespec *timeout); }
// { int kenv(int what, const char *name, char *value, int len); }
// { int lchflags(char *path, int flags); }
// { int uuidgen(struct uuid *store, int count); }
// { int sendfile(int fd, int s, off_t offset, size_t nbytes, struct sf_hdtr *hdtr, off_t *sbytes, int flags); }
// { int varsym_set(int level, const char *name, const char *data); }
// { int varsym_get(int mask, const char *wild, char *buf, int bufsize); }
// { int varsym_list(int level, char *buf, int maxsize, int *marker); }
// { int exec_sys_register(void *entry); }
// { int exec_sys_unregister(int id); }
// { int sys_checkpoint(int type, int fd, pid_t pid, int retval); }
// { int mountctl(const char *path, int op, int fd, const void *ctl, int ctllen, void *buf, int buflen); }
// { int umtx_sleep(volatile const int *ptr, int value, int timeout); }
// { int umtx_wakeup(volatile const int *ptr, int count); }
// { int jail_attach(int jid); }
// { int set_tls_area(int which, struct tls_info *info, size_t infosize); }
// { int get_tls_area(int which, struct tls_info *info, size_t infosize); }
// { int closefrom(int fd); }
// { int stat(const char *path, struct stat *ub); }
// { int fstat(int fd, struct stat *sb); }
// { int lstat(const char *path, struct stat *ub); }
// { int fhstat(const struct fhandle *u_fhp, struct stat *sb); }
// { int getdirentries(int fd, char *buf, u_int count, long *basep); }
// { int getdents(int fd, char *buf, size_t count); }
// { int usched_set(pid_t pid, int cmd, void *data, int bytes); }
// { int extaccept(int s, int flags, caddr_t name, int *anamelen); }
// { int extconnect(int s, int flags, caddr_t name, int namelen); }
// { int mcontrol(void *addr, size_t len, int behav, off_t value); }
// { int vmspace_create(void *id, int type, void *data); }
// { int vmspace_destroy(void *id); }
// { int vmspace_ctl(void *id, int cmd, 		struct trapframe *tframe,	struct vextframe *vframe); }
// { int vmspace_mmap(void *id, void *addr, size_t len, int prot, int flags, int fd, off_t offset); }
// { int vmspace_munmap(void *id, void *addr,	size_t len); }
// { int vmspace_mcontrol(void *id, void *addr, 	size_t len, int behav, off_t value); }
// { ssize_t vmspace_pread(void *id, void *buf, size_t nbyte, int flags, off_t offset); }
// { ssize_t vmspace_pwrite(void *id, const void *buf, size_t nbyte, int flags, off_t offset); }
// { void extexit(int how, int status, void *addr); }
// { int lwp_create(struct lwp_params *params); }
// { lwpid_t lwp_gettid(void); }
// { int lwp_kill(pid_t pid, lwpid_t tid, int signum); }
// { int lwp_rtprio(int function, pid_t pid, lwpid_t tid, struct rtprio *rtp); }
// { int pselect(int nd, fd_set *in, fd_set *ou, fd_set *ex, const struct timespec *ts,    const sigset_t *sigmask); }
// { int statvfs(const char *path, struct statvfs *buf); }
// { int fstatvfs(int fd, struct statvfs *buf); }
// { int fhstatvfs(const struct fhandle *u_fhp, struct statvfs *buf); }
// { int getvfsstat(struct statfs *buf,          struct statvfs *vbuf, long vbufsize, int flags); }
// { int openat(int fd, char *path, int flags, int mode); }
// { int fstatat(int fd, char *path, 	struct stat *sb, int flags); }
// { int fchmodat(int fd, char *path, int mode, int flags); }
// { int fchownat(int fd, char *path, int uid, int gid, int flags); }
// { int unlinkat(int fd, char *path, int flags); }
// { int faccessat(int fd, char *path, int amode, int flags); }
// { mqd_t mq_open(const char * name, int oflag, mode_t mode, struct mq_attr *attr); }
// { int mq_close(mqd_t mqdes); }
// { int mq_unlink(const char *name); }
// { int mq_getattr(mqd_t mqdes, struct mq_attr *mqstat); }
// { int mq_setattr(mqd_t mqdes, const struct mq_attr *mqstat, struct mq_attr *omqstat); }
// { int mq_notify(mqd_t mqdes, const struct sigevent *notification); }
// { int mq_send(mqd_t mqdes, const char *msg_ptr, size_t msg_len, unsigned msg_prio); }
// { ssize_t mq_receive(mqd_t mqdes, char *msg_ptr, size_t msg_len, unsigned *msg_prio); }
// { int mq_timedsend(mqd_t mqdes, const char *msg_ptr, size_t msg_len, unsigned msg_prio, const struct timespec *abs_timeout); }
// { ssize_t mq_timedreceive(mqd_t mqdes, char *msg_ptr, size_t msg_len, unsigned *msg_prio, const struct timespec *abs_timeout); }
// { int ioprio_set(int which, int who, int prio); }
// { int ioprio_get(int which, int who); }
// { int chroot_kernel(char *path); }
// { int renameat(int oldfd, char *old, int newfd, char *new); }
// { int mkdirat(int fd, char *path, mode_t mode); }
// { int mkfifoat(int fd, char *path, mode_t mode); }
// { int mknodat(int fd, char *path, mode_t mode, dev_t dev); }
// { int readlinkat(int fd, char *path, char *buf, size_t bufsize); }
// { int symlinkat(char *path1, int fd, char *path2); }
// { int swapoff(char *name); }
// { int vquotactl(const char *path, struct plistref *pref); }
// { int linkat(int fd1, char *path1, int fd2, char *path2, int flags); }
// { int eaccess(char *path, int flags); }
// { int lpathconf(char *path, int name); }
// { int vmm_guest_ctl(int op, struct vmm_guest_options *options); }
// { int vmm_guest_sync_addr(long *dstaddr, long *srcaddr); }
// { int procctl(idtype_t idtype, id_t id, int cmd, void *data); }
// { int chflagsat(int fd, const char *path, int flags, int atflags);}
// { int pipe2(int *fildes, int flags); }
// { int utimensat(int fd, const char *path, const struct timespec *ts, int flags); }
// { int futimens(int fd, const struct timespec *ts); }
// { int accept4(int s, caddr_t name, int *anamelen, int flags); }
// { int lwp_setname(lwpid_t tid, const char *name); }
// { int ppoll(struct pollfd *fds, u_int nfds, const struct timespec *ts, const sigset_t *sigmask); }
// { int lwp_setaffinity(pid_t pid, lwpid_t tid, const cpumask_t *mask); }
// { int lwp_getaffinity(pid_t pid, lwpid_t tid, cpumask_t *mask); }
// { int lwp_create2(struct lwp_params *params, const cpumask_t *mask); }
